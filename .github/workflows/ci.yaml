---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Cancel in-progress runs when a new workflow run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ═══════════════════════════════════════════════════════════
  # TIER 1: Fast Validation (~2-5 minutes)
  # ═══════════════════════════════════════════════════════════

  nix-flake-check:
    name: Nix Flake Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            max-jobs = auto

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: nix-community
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Check Nix flake validity
        run: nix flake check --no-build

      - name: Verify flake.lock is in sync
        run: |
          nix flake lock --no-update-lock-file
          if git diff --exit-code flake.lock; then
            echo "✓ flake.lock is up to date"
          else
            echo "✗ flake.lock is out of sync"
            echo "Run: nix flake update"
            exit 1
          fi

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: nix-community
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Enter dev shell and run pre-commit
        run: |
          nix develop --command bash -c "
            pre-commit run --all-files --show-diff-on-failure
          "

  nix-fmt-check:
    name: Nix Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true

      - name: Check Nix formatting with Alejandra
        run: |
          nix develop --command alejandra --check .

      - name: Check for unused Nix code
        run: |
          nix develop --command deadnix --fail --no-underscore --no-lambda-pattern-names .

      - name: Run statix linter
        run: |
          nix develop --command statix check .

  # ═══════════════════════════════════════════════════════════
  # TIER 2: Build Validation (~5-15 minutes)
  # ═══════════════════════════════════════════════════════════

  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [nix-flake-check]
    strategy:
      matrix:
        package:
          - cargo-mcp
          - cratedocs-mcp
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            max-jobs = auto

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: nix-community
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Build ${{ matrix.package }}
        run: |
          nix build .#${{ matrix.package }} -L
          echo "✓ Successfully built ${{ matrix.package }}"

      - name: Show package info
        run: |
          nix path-info .#${{ matrix.package }}

      - name: Test package execution
        run: |
          # Verify the binary exists and can be executed
          result=$(nix build .#${{ matrix.package }} --print-out-paths)
          if [[ "${{ matrix.package }}" == "cargo-mcp" ]]; then
            $result/bin/cargo-mcp --version || $result/bin/cargo-mcp --help
          elif [[ "${{ matrix.package }}" == "cratedocs-mcp" ]]; then
            $result/bin/cratedocs --version || $result/bin/cratedocs --help || echo "Binary check completed"
          fi

  test-devshells:
    name: Test DevShells
    runs-on: ubuntu-latest
    needs: [nix-flake-check]
    strategy:
      matrix:
        shell:
          - rust
          - php
          - nix
          - cpp
          - python
          - py-cpp
          - latex
          - ansible
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            max-jobs = auto

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: nix-community
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Test ${{ matrix.shell }} devshell
        run: |
          echo "Testing ${{ matrix.shell }} devshell instantiation..."
          nix develop .#${{ matrix.shell }} --command bash -c "
            echo '✓ DevShell activated successfully'
            echo 'Checking available tools...'
            which git && echo '  ✓ git'
            which nix && echo '  ✓ nix'
          "

  test-templates:
    name: Test Templates
    runs-on: ubuntu-latest
    needs: [nix-flake-check]
    strategy:
      matrix:
        template:
          - rust
          - php
          - latex
          - cpp
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            max-jobs = auto

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: nix-community
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true

      - name: Initialize ${{ matrix.template }} template
        run: |
          mkdir -p test-${{ matrix.template }}
          cd test-${{ matrix.template }}
          nix flake init -t ..#${{ matrix.template }}
          git init && git add .
          echo "✓ Template initialized successfully"

      - name: Verify template structure
        run: |
          cd test-${{ matrix.template }}
          echo "Checking template files..."
          ls -la
          [ -f flake.nix ] && echo "  ✓ flake.nix"
          [ -f .envrc ] && echo "  ✓ .envrc"
          [ -f .mcp.json ] && echo "  ✓ .mcp.json"
          [ -f .pre-commit-config.yaml ] && echo "  ✓ .pre-commit-config.yaml"

      - name: Test template flake check
        run: |
          cd test-${{ matrix.template }}
          nix flake check --no-build
          echo "✓ Template flake is valid"

  # ═══════════════════════════════════════════════════════════
  # Summary Job (required for branch protection)
  # ═══════════════════════════════════════════════════════════

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      - nix-flake-check
      - pre-commit
      - nix-fmt-check
      - build-packages
      - test-devshells
      - test-templates
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.nix-flake-check.result }}" != "success" ]] || \
             [[ "${{ needs.pre-commit.result }}" != "success" ]] || \
             [[ "${{ needs.nix-fmt-check.result }}" != "success" ]] || \
             [[ "${{ needs.build-packages.result }}" != "success" ]] || \
             [[ "${{ needs.test-devshells.result }}" != "success" ]] || \
             [[ "${{ needs.test-templates.result }}" != "success" ]]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          fi
          echo "✅ All CI jobs passed successfully"
