repos:
  # All hooks use local/system tools to avoid NixOS dynamic linking issues
  - repo: local
    hooks:
      # ═══════════════════════════════════════════════════════════
      # FILE QUALITY CHECKS (STRICT)
      # ═══════════════════════════════════════════════════════════

      - id: trailing-whitespace
        name: trim trailing whitespace
        entry: sed -i 's/[[:space:]]*$//'
        language: system
        types: [text]
        stages: [commit]

      - id: end-of-file-fixer
        name: fix end of files
        entry: bash -c 'for file in "$@"; do if [ -s "$file" ] && [ "$(tail -c1 "$file")" != "" ]; then echo >> "$file"; fi; done' --
        language: system
        types: [text]
        stages: [commit]

      - id: mixed-line-ending
        name: check for mixed line endings
        entry: bash
        language: system
        types: [text]
        stages: [commit]
        args:
          - -c
          - 'for file in "$@"; do if file "$file" | grep -q "CRLF"; then echo "CRLF line endings in $file"; exit 1; fi; done'
          - --

      - id: check-executables-have-shebangs
        name: check executables have shebangs
        entry: bash
        language: system
        types: [text]
        stages: [commit]
        args:
          - -c
          - 'for file in "$@"; do if [ -x "$file" ] && [ -f "$file" ] && ! head -n1 "$file" | grep -q "^#!"; then echo "Executable $file missing shebang"; exit 1; fi; done'
          - --

      - id: check-shebang-scripts-are-executable
        name: check shebang scripts are executable
        entry: bash
        language: system
        types: [text]
        stages: [commit]
        args:
          - -c
          - 'for file in "$@"; do if head -n1 "$file" 2>/dev/null | grep -q "^#!" && [ ! -x "$file" ]; then echo "Script $file has shebang but is not executable"; exit 1; fi; done'
          - --

      # ═══════════════════════════════════════════════════════════
      # YAML VALIDATION (STRICT)
      # ═══════════════════════════════════════════════════════════

      - id: check-yaml
        name: check yaml syntax
        entry: yamllint
        language: system
        files: \.(yaml|yml)$
        exclude: ^\.pre-commit-config\.yaml$
        stages: [commit]

      - id: check-json
        name: check json syntax
        entry: bash
        language: system
        files: \.json$
        stages: [commit]
        args:
          - -c
          - 'for file in "$@"; do jq empty "$file" || exit 1; done'
          - --

      # ═══════════════════════════════════════════════════════════
      # SECURITY CHECKS (STRICT)
      # ═══════════════════════════════════════════════════════════

      - id: detect-private-key
        name: detect private keys
        entry: bash
        language: system
        types: [text]
        exclude: ^\.pre-commit-config\.yaml$
        stages: [commit]
        args:
          - -c
          - 'for file in "$@"; do if grep -l "BEGIN.*PRIVATE KEY" "$file"; then echo "Private key detected in $file"; exit 1; fi; done'
          - --

      - id: check-added-large-files
        name: check for added large files (strict 500KB limit)
        entry: bash
        language: system
        pass_filenames: false
        stages: [commit]
        args:
          - -c
          - |
            # Check only git-tracked files, excluding LFS files
            for file in $(git ls-files); do
              if [ -f "$file" ]; then
                # Skip if file is managed by git-lfs (check .gitattributes)
                if git check-attr filter "$file" | grep -q "filter: lfs"; then
                  continue
                fi
                # Check file size (strict 500KB limit)
                size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
                if [ "$size" -gt 512000 ]; then
                  echo "ERROR: Large file detected: $file (${size} bytes)"
                  echo "Maximum allowed size: 500KB (512000 bytes)"
                  echo "Consider using git-lfs for this file"
                  exit 1
                fi
              fi
            done

      - id: check-secrets
        name: check for common secrets patterns
        entry: bash
        language: system
        types: [text]
        exclude: "^(.pre-commit-config.yaml|.*test.*|.*example.*)$"
        stages: [commit]
        args:
          - -c
          - 'for file in "$@"; do if grep -iE "(password|secret|api[_-]?key|token|credential)[[:space:]]*[:=][[:space:]]*[''\"''][^''\"'']+[''\"'']" "$file"; then echo "Potential secret in $file"; exit 1; fi; done'
          - --

      # ═══════════════════════════════════════════════════════════
      # GIT REPOSITORY CHECKS (STRICT)
      # ═══════════════════════════════════════════════════════════

      - id: check-case-conflict
        name: check for case conflicts
        entry: bash
        language: system
        pass_filenames: false
        stages: [commit]
        args:
          - -c
          - 'git ls-files | sort -f | uniq -i -d | grep -q . && echo "ERROR: Case conflicts detected in filenames" && exit 1 || exit 0'

      - id: check-merge-conflict
        name: check for merge conflicts
        entry: bash
        language: system
        types: [text]
        pass_filenames: false
        stages: [commit]
        args:
          - -c
          - 'grep -r "^<<<<<<< \|^=======$\|^>>>>>>> " . --exclude-dir=.git && echo "ERROR: Merge conflict markers detected" && exit 1 || exit 0'

      - id: check-symlinks
        name: check for broken symlinks
        entry: bash
        language: system
        pass_filenames: false
        stages: [commit]
        args:
          - -c
          - 'find . -type l ! -exec test -e {} \; -print | grep -q . && echo "ERROR: Broken symlinks detected" && exit 1 || exit 0'

      - id: forbid-new-submodules
        name: forbid new git submodules
        entry: bash
        language: system
        pass_filenames: false
        stages: [commit]
        args:
          - -c
          - '[ -f .gitmodules ] && echo "ERROR: Git submodules are not allowed in this repository" && exit 1 || exit 0'

      # ═══════════════════════════════════════════════════════════
      # NIX FORMATTING AND LINTING (STRICT)
      # ═══════════════════════════════════════════════════════════

      - id: alejandra
        name: alejandra nix formatter (strict)
        entry: alejandra --check
        language: system
        files: \.nix$
        pass_filenames: true
        stages: [commit]

      - id: alejandra-fix
        name: alejandra nix formatter (auto-fix)
        entry: alejandra
        language: system
        files: \.nix$
        pass_filenames: true
        stages: [manual]

      - id: deadnix
        name: deadnix - detect unused nix code (strict)
        entry: deadnix --fail
        language: system
        files: \.nix$
        args: ["--no-underscore", "--no-lambda-pattern-names"]
        stages: [commit]

      - id: deadnix-fix
        name: deadnix - remove unused nix code (auto-fix)
        entry: deadnix
        language: system
        files: \.nix$
        args: ["--edit", "--no-underscore", "--no-lambda-pattern-names"]
        stages: [manual]

      - id: statix
        name: statix nix linter (strict)
        entry: statix
        language: system
        files: \.nix$
        args: ["check", "."]
        pass_filenames: false
        stages: [commit]

      - id: statix-fix
        name: statix nix linter (auto-fix)
        entry: statix
        language: system
        files: \.nix$
        args: ["fix", "."]
        pass_filenames: false
        stages: [manual]

      # ═══════════════════════════════════════════════════════════
      # NIX FLAKE VALIDATION (STRICT)
      # ═══════════════════════════════════════════════════════════

      - id: nix-flake-check
        name: nix flake check (strict)
        entry: nix
        args: ["flake", "check", "--no-build"]
        language: system
        files: ^(flake\.(nix|lock)|.*\.nix)$
        pass_filenames: false
        stages: [commit]

      - id: nix-flake-lock-check
        name: check flake.lock is up to date
        entry: bash
        language: system
        files: ^flake\.(nix|lock)$
        pass_filenames: false
        stages: [commit]
        args:
          - -c
          - 'nix flake lock --no-update-lock-file 2>&1 | grep -q "warning: updating lock file" && echo "ERROR: flake.lock is out of sync. Run: nix flake update" && exit 1 || exit 0'

      # ═══════════════════════════════════════════════════════════
      # SHELL SCRIPT VALIDATION (STRICT)
      # ═══════════════════════════════════════════════════════════

      - id: shellcheck
        name: shellcheck (strict)
        entry: shellcheck
        language: system
        files: \.(sh|bash)$
        args: ["-x", "--severity=warning"]
        stages: [commit]

      - id: shellcheck-extra-strict
        name: shellcheck (extra strict - errors only)
        entry: shellcheck
        language: system
        files: \.(sh|bash)$
        args: ["-x", "--severity=error"]
        stages: [push]

      # ═══════════════════════════════════════════════════════════
      # FORMATTING (STRICT)
      # ═══════════════════════════════════════════════════════════

      - id: prettier-check
        name: prettier formatter check (strict)
        entry: prettier
        language: system
        files: \.(yaml|yml|json|md)$
        exclude: flake\.lock$
        args: ["--check"]
        stages: [commit]

      - id: prettier-fix
        name: prettier formatter (auto-fix)
        entry: prettier
        language: system
        files: \.(yaml|yml|json|md)$
        exclude: flake\.lock$
        args: ["--write"]
        stages: [manual]

      # ═══════════════════════════════════════════════════════════
      # SPELL CHECKING (STRICT)
      # ═══════════════════════════════════════════════════════════

      - id: typos
        name: typos spell checker (strict)
        entry: typos
        language: system
        types: [text]
        exclude: flake\.lock$
        stages: [commit]

      # ═══════════════════════════════════════════════════════════
      # DOCUMENTATION CHECKS
      # ═══════════════════════════════════════════════════════════

      - id: check-markdown-links
        name: check markdown links are valid
        entry: bash
        language: system
        files: \.md$
        stages: [commit]
        args:
          - -c
          - 'for file in "$@"; do grep -oP "(?<=\]\()[^)]*(?=\))" "$file" | while read link; do if [[ "$link" =~ ^/ ]] && [ ! -f "${link#/}" ] && [ ! -d "${link#/}" ]; then echo "Broken link in $file: $link"; exit 1; fi; done; done'
          - --

      # ═══════════════════════════════════════════════════════════
      # BUILD VALIDATION (PUSH STAGE)
      # ═══════════════════════════════════════════════════════════

      - id: nix-build-check
        name: nix build check (packages)
        entry: bash
        language: system
        pass_filenames: false
        stages: [push]
        args:
          - -c
          - 'nix flake show --json | jq -r ".packages.\"$(nix eval --impure --raw --expr builtins.currentSystem)\" | keys[]" | while read pkg; do echo "Building package: $pkg"; nix build ".#$pkg" --no-link || exit 1; done'
